using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
//Eklenenler
using HtmlAgilityPack;
using System.Net;
using System.Text.RegularExpressions;
using System.IO;

namespace Pentest_Hedef_Site_Bilgi_Toplama_Aracı
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        string hedefSite = null;
        string dosyaTurleri = null;

        string yol = null;
        string klasorAdi = null;
        string hedefYol = null;

        private void Form1_Load(object sender, EventArgs e)
        {
            //File Spider için Dosya Türleri
            dosya_Turleri_Aktar();
            
        }

        #region Taramayı Başlat
        private void button_Baslat_Click(object sender, EventArgs e)
        {
            if (textBox_HedefSite.Text == "") 
            {
                MessageBox.Show("Hedef site adresini boş bırakamazsınız!", "Hata; ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                #region Temizle

                #region Whois
                textBox_Whois_Registrar_Firma.Clear();
                textBox_Whois_Registrar_ID.Clear();
                textBox_Whois_Registrar_Telefon.Clear();
                textBox_Whois_Registrar_Email.Clear();
                textBox_Whois_AdminAdSoyad.Clear();
                textBox_Whois_AdminSirketi.Clear();
                textBox_Whois_AdminTelefon.Clear();
                textBox_Whois_AdminEmail.Clear();
                textBox_Whois_AdminUlke.Clear();
                textBox_Whois_AdminSehir.Clear();
                textBox_Whois_AdminAdres.Clear();
                listBox_Whois_NS.Items.Clear();
                listBox_Whois_IP.Items.Clear();
                textBox_Whois_Olusturma.Clear();
                textBox_Whois_Bitis.Clear();
                textBox_Whois_Guncelleme.Clear();
                textBox_Whois_DomainDurumu.Clear();
                textBox_Whois_SiteDurum.Clear();
                textBox_Whois_IPAdres.Clear();
                textBox_Whois_ServerTipi.Clear();
                #endregion

                #region ReverseIP
                listBox_ReverseIPList.Items.Clear();
                textBox_ReverseIP_ToplamSite.Clear();
                textBox_ReverseIP_SeciliSite.Clear();
                #endregion

                #region Spider
                listBox_SpiderList.Items.Clear();
                textBox_Spider_ToplamURL.Clear();
                textBox_Spider_SeciliAdres.Clear();
                #endregion

                #region File Spider
                textBox_FileSpider_DosyaTuruEkle.Clear();
                textBox_FileSpider.Clear();
                textBox_FileSpider_SeciliURL.Clear();
                listBox_FileSpider_Sonuclar.Items.Clear();
                #endregion

                #endregion

                // Hedef Siteyi Değişkene Atama
                hedefSite = textBox_HedefSite.Text.Replace("http://", "");
                hedefSite = hedefSite.Replace("https://", "");
                hedefSite = hedefSite.Replace("www.","");

                //Sorgulama Motorları
                whois_Sorgusu();
                whois_Sorgusu2();
                webBrowser1.Navigate(textBox_WhoisSite3.Text + hedefSite);
                reverseIP_Sorgusu();
                spider_Sorgusu();
                fileSpider_Sorgusu();

                MessageBox.Show("Bilgi toplama işlemi tamamlandı.", "Bilgi; ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                
            }
        }
        #endregion

        #region Whois Sorgusu
        private void whois_Sorgusu()
        {
            try
            {
                // Whois Sitesinde Aranan Hedef Sitenin HTML Kaynak Kod Sonuçları
                Uri url = new Uri(textBox_WhoisSite2.Text + hedefSite);
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                dokuman.LoadHtml(html);

                #region Domain Durumu 
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[5]/td[2]");
                    foreach (var veri in XPath)
                    {
                        if (veri.InnerText.IndexOf("ok") != -1)
                        {
                            textBox_Whois_DomainDurumu.Text = "icann - Ok";
                        }
                        else if (veri.InnerText.IndexOf("clientUpdateProhibited") != -1)
                        {
                            textBox_Whois_DomainDurumu.Text = "icann - Ok";
                        }
                    }
                }catch { }
                #endregion

                #region Oluşturma Tarihi
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[2]/td[2]");
                    foreach (var veri in XPath)
                    {
                        textBox_Whois_Olusturma.Text = veri.InnerText.Replace(" ","");
                    }
                }
                catch { }
                #endregion

                #region Bitiş Tarihi
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[2]/td[2]");
                    foreach (var veri in XPath)
                    {
                        textBox_Whois_Bitis.Text = veri.InnerText.Replace(" ", "");
                    }
                }
                catch { }
                #endregion

                #region Son Güncelleme Tarihi
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[4]/td[2]");
                    foreach (var veri in XPath)
                    {
                        textBox_Whois_Guncelleme.Text = veri.InnerText.Replace(" ", "");
                    }
                }
                catch { }
                #endregion

                #region NS & IP
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[1]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ",""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[2]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[3]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[4]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[5]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[6]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[7]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[8]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[9]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[10]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                #endregion

            }
            catch 
            {
                MessageBox.Show("Whois Sorgusu Yapılamadı!", "Hata; ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        //NS Seçilirse IP Seç
        private void listBox_Whois_NS_SelectedIndexChanged(object sender, EventArgs e)
        {
            listBox_Whois_IP.SelectedIndex = listBox_Whois_NS.SelectedIndex;
        }
        //IP seçilirse NS seç
        private void listBox_Whois_IP_SelectedIndexChanged(object sender, EventArgs e)
        {
            listBox_Whois_NS.SelectedIndex = listBox_Whois_IP.SelectedIndex;
        }
        #endregion

        #region Whois Sorgusu 2
        private void whois_Sorgusu2()
        {
            try
            {
                Uri url2 = new Uri(textBox_WhoisSite.Text + hedefSite);
                WebClient client2 = new WebClient();
                string html2 = client2.DownloadString(url2);
                HtmlAgilityPack.HtmlDocument dokuman2 = new HtmlAgilityPack.HtmlDocument();
                dokuman2.LoadHtml(html2);
                richTextBox1.Text = html2;
                
                #region İp Adres
                try
                {
                    HtmlNodeCollection XPath = dokuman2.DocumentNode.SelectNodes("//*[@id='site_info']/div[1]/table/tbody/tr[1]/td/a");
                    foreach (var veri in XPath)
                    {
                        textBox_Whois_IPAdres.Text = veri.InnerText;
                    }
                }
                catch { }
                #endregion

                #region Site durum
                try
                {
                    HtmlNodeCollection XPath = dokuman2.DocumentNode.SelectNodes("//*[@id='site_info']/div[2]/div[2]/p/span/span");
                    foreach (var veri in XPath)
                    {
                        textBox_Whois_SiteDurum.Text = veri.InnerText.Replace("active", "Aktif");
                    }
                }
                catch { }
                #endregion

                #region Server Tipi
                try
                {
                    HtmlNodeCollection XPath = dokuman2.DocumentNode.SelectNodes("//*[@id='site_info']/div[3]/div[2]/p/span");
                    foreach (var veri in XPath)
                    {
                        textBox_Whois_ServerTipi.Text = veri.InnerText;
                    }
                }
                catch { }
                #endregion
            }
            catch 
            {
                MessageBox.Show("Whois Sorgusu Yapılamadı!", "Hata; ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        #region Whois Sorgusu 3
        private void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {
            try
            {
                richTextBox1.Text = webBrowser1.Document.Body.InnerHtml.ToString();
                whois_Sorgusu3();
            }
            catch { }
        }
        private void whois_Sorgusu3()
        {
            try
            {
                #region Barındığı Firma
                try
                {
                    string gelen = richTextBox1.Text;
                    int titleIndexBaslangici = gelen.IndexOf("Registrar:") + 10;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf("Sponsoring Registrar IANA ID:");
                    string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi);
                    textBox_Whois_Registrar_Firma.Text = cikti.Remove(0, 1).Replace("<BR>", "");
                }
                catch{}
                #endregion

                #region Domain ID
                try
                {
                    string gelen = richTextBox1.Text;
                    int titleIndexBaslangici = gelen.IndexOf("Sponsoring Registrar IANA ID:") + 29;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf("Whois Server:");
                    string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi);
                    textBox_Whois_Registrar_ID.Text = cikti.Remove(0, 1).Replace("<BR>", "");
                }catch { }
                #endregion

                #region Telefon
                try
                {
                    string gelen = richTextBox1.Text;
                    int titleIndexBaslangici = gelen.IndexOf("Registrant Phone:") + 17;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf("Registrant Phone Ext:");
                    string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi);
                    textBox_Whois_Registrar_Telefon.Text = cikti.Remove(0, 1).Replace("<BR>", "");
                }
                catch { }
                #endregion

                #region Email
                try
                {
                    string gelen = richTextBox1.Text;
                    int titleIndexBaslangici = gelen.IndexOf("Registrant Email:") + 17;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf("Registry Admin ID:");
                    string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi) + "#";
                    cikti = cikti.Remove(0, 1).Replace("<BR>", "");

                    string gelen2 = cikti;
                    int titleIndexBaslangici2 = gelen2.IndexOf("src=") + 5;
                    int titleIndexBitisi2 = gelen2.Substring(titleIndexBaslangici2).IndexOf(".png");
                    string cikti2 = gelen2.Substring(titleIndexBaslangici2, titleIndexBitisi2);
                    cikti2 = "http://www.whois.com/" + cikti2 + ".png";

                    string gelen3 = cikti;
                    int titleIndexBaslangici3 = gelen3.IndexOf(">@") + 2;
                    int titleIndexBitisi3 = gelen3.Substring(titleIndexBaslangici3).IndexOf("#");
                    string cikti3 = gelen3.Substring(titleIndexBaslangici3, titleIndexBitisi3);
                    cikti3 = "@" + cikti3;

                    pictureBox3.ImageLocation = cikti2;
                    textBox_Whois_Registrar_Email.Text = cikti3;
                }
                catch { }
                #endregion

                #region Ad Soyad
                try
                {
                    string gelen = richTextBox1.Text;
                    int titleIndexBaslangici = gelen.IndexOf("Admin Name:") + 11;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf("Admin Organization:");
                    string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi);
                    textBox_Whois_AdminAdSoyad.Text = cikti.Remove(0, 1).Replace("<BR>", "");
                }
                catch { }
                #endregion

                #region Şirketi
                try
                {
                    string gelen = richTextBox1.Text;
                    int titleIndexBaslangici = gelen.IndexOf("Admin Organization:") + 19;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf("Admin Street:");
                    string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi);
                    textBox_Whois_AdminSirketi.Text = cikti.Remove(0, 1).Replace("<BR>", "");
                }
                catch { }
                #endregion

                #region Telefon
                try
                {
                    string gelen = richTextBox1.Text;
                    int titleIndexBaslangici = gelen.IndexOf("Admin Phone:") + 12;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf("Admin Phone Ext:");
                    string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi);
                    textBox_Whois_AdminTelefon.Text = cikti.Remove(0, 1).Replace("<BR>", "");
                }
                catch { }
                #endregion

                #region Email
                try
                {
                    string gelen = richTextBox1.Text;
                    int titleIndexBaslangici = gelen.IndexOf("Admin Email:") + 12;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf("Registry Tech ID:");
                    string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi) + "#";
                    cikti = cikti.Remove(0, 1).Replace("<BR>", "");

                    string gelen2 = cikti;
                    int titleIndexBaslangici2 = gelen2.IndexOf("src=") + 5;
                    int titleIndexBitisi2 = gelen2.Substring(titleIndexBaslangici2).IndexOf(".png");
                    string cikti2 = gelen2.Substring(titleIndexBaslangici2, titleIndexBitisi2);
                    cikti2 = "http://www.whois.com/" + cikti2 + ".png";

                    string gelen3 = cikti;
                    int titleIndexBaslangici3 = gelen3.IndexOf(">@") + 2;
                    int titleIndexBitisi3 = gelen3.Substring(titleIndexBaslangici3).IndexOf("#");
                    string cikti3 = gelen3.Substring(titleIndexBaslangici3, titleIndexBitisi3);
                    cikti3 = "@" + cikti3;

                    pictureBox2.ImageLocation = cikti2;
                    textBox_Whois_AdminEmail.Text = cikti3;
                }
                catch { }
                #endregion

                #region Ülke
                try
                {
                    string gelen = richTextBox1.Text;
                    int titleIndexBaslangici = gelen.IndexOf("Admin Country:") + 14;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf("Admin Phone:");
                    string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi);
                    textBox_Whois_AdminUlke.Text = cikti.Remove(0, 1).Replace("<BR>", "");
                }
                catch { }
                #endregion

                #region Sehir
                try
                {
                    string gelen = richTextBox1.Text;
                    int titleIndexBaslangici = gelen.IndexOf("Admin City:") + 11;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf("Admin State");
                    string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi);
                    textBox_Whois_AdminSehir.Text = cikti.Remove(0, 1).Replace("<BR>", "");
                }
                catch { }
                #endregion

                #region Adres
                try
                {
                    string gelen = richTextBox1.Text;
                    int titleIndexBaslangici = gelen.IndexOf("Admin Street:") + 13;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf("Admin City:");
                    string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi);
                    textBox_Whois_AdminAdres.Text = cikti.Remove(0,1).Replace("<BR>","");
                }
                catch { }
                #endregion

            }
            catch
            {
                MessageBox.Show("Whois Sorgusu Yapılamadı!", "Hata; ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        #region ReverseIP Sorgusu
        private void reverseIP_Sorgusu()
        {
            try
            {
                // Whois Sitesinde Aranan Hedef Sitenin HTML Kaynak Kod Sonuçları
                Uri url = new Uri(textBox_ReverseIPSite.Text + "reverseip/?host=" + hedefSite + "&t=1");
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                dokuman.LoadHtml(html);
                string cikti = null;
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//*[@id='null']/tr[3]/td/font/table");
                    foreach (var veri in XPath)
                    {
                        cikti = veri.InnerHtml;
                    }

                    HtmlAgilityPack.HtmlDocument dokuman2 = new HtmlAgilityPack.HtmlDocument();
                    dokuman2.LoadHtml(cikti);
                    HtmlNodeCollection XPath2 = dokuman2.DocumentNode.SelectNodes("*/td[1]");
                    foreach (var veri2 in XPath2)
                    {
                        listBox_ReverseIPList.Items.Add(veri2.InnerText);
                        listBox_ReverseIPList.Items.Remove("Domain");
                    }

                    textBox_ReverseIP_ToplamSite.Text = listBox_ReverseIPList.Items.Count.ToString();

            }
            catch
            {
                MessageBox.Show("ReverseIP Sorgusu Yapılamadı!", "Hata; ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        //ReverseIP Seçili Site
        private void listBox_ReverseIPList_SelectedIndexChanged(object sender, EventArgs e)
        {
            textBox_ReverseIP_SeciliSite.Text = listBox_ReverseIPList.Text;
        }
        #endregion

        #region Spider Sorgusu
        private void spider_Sorgusu()
        {
            try
            {
                //textBox_SpiderSite
                Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite);
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                dokuman.LoadHtml(html);
                HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                foreach (var veri in XPath)
                {
                    string gelen = veri.InnerHtml;
                    int titleIndexBaslangici = gelen.IndexOf(textBox2.Text) + textBox2.TextLength;
                    int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf(textBox4.Text);
                    string gelen2 = gelen.Substring(titleIndexBaslangici, titleIndexBitisi).Replace("%3F", "?");
                    listBox_SpiderList.Items.Add(gelen2.Replace("%3D", "="));
                    textBox_Spider_ToplamURL.Text = listBox_SpiderList.Items.Count.ToString();
                }

            }
            catch
            {
                MessageBox.Show("Spider Sorgusu Yapılamadı!","Hata; ",MessageBoxButtons.OK,MessageBoxIcon.Error);
            }
        }
        private void listBox_SpiderList_SelectedIndexChanged(object sender, EventArgs e)
        {
            textBox_Spider_SeciliAdres.Text = listBox_SpiderList.Text;
        }
        #endregion

        #region Dosya Türleri
        private void dosya_Turleri_Aktar()
        {
            try
            {
                dosyaTurleri = Application.StartupPath + @"\FileType.txt";

                if (!File.Exists(dosyaTurleri))
                {
                    MessageBox.Show("File Spider için dosya türlerinin bulunduğu 'FileType.txt' dosyası yok!", "Hata; ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                StreamReader oku;
                oku = File.OpenText(dosyaTurleri);

                string yazi;
                while ((yazi = oku.ReadLine()) != null)
                {
                    listBox_FileSpider_DosyaTurleri.Items.Add(yazi.ToString());
                }
                oku.Close();
            }
            catch
            {

            }
        }
        #endregion

        #region File Spider 
        private void fileSpider_Sorgusu()
        {
            try
            {
                for (int i = 0; listBox_FileSpider_DosyaTurleri.Items.Count > i; i++)
                {
                    Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite + "+filetype:" + listBox_FileSpider_DosyaTurleri.Text);
                    //Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:bga.com.tr+filetype:pdf");

                    WebClient client = new WebClient();
                    string html = client.DownloadString(url);
                    HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                    dokuman.LoadHtml(html);
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                    foreach (var veri in XPath)
                    {
                        string gelen = veri.InnerHtml;
                        int titleIndexBaslangici = gelen.IndexOf(textBox2.Text) + textBox2.TextLength;
                        int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf(textBox4.Text);
                        string gelen2 = gelen.Substring(titleIndexBaslangici, titleIndexBitisi).Replace("%3F", "?");
                        listBox_FileSpider_Sonuclar.Items.Add(gelen2.Replace("%3D", "="));
                        textBox_FileSpider.Text = listBox_FileSpider_Sonuclar.Items.Count.ToString();

                        string[] elemanlar ={
                                    gelen2.Replace("%3D", "="),
                                    listBox_FileSpider_DosyaTurleri.Text
                                    };
                        listBox_FileSpider_Sonuclar.Items.Add(elemanlar);
                    }
                }
            } catch {}
        }
        private void button_FileSpider_DosyaTuruEkle_Click(object sender, EventArgs e)
        {
            listBox_FileSpider_DosyaTurleri.Items.Add(textBox_FileSpider_DosyaTuruEkle.Text);
        }
        private void button_FileSpider_SeciliDosyaTuruSil_Click(object sender, EventArgs e)
        {
            listBox_FileSpider_DosyaTurleri.Items.Remove(listBox_FileSpider_DosyaTurleri.SelectedIndex);
        }
        #endregion

        #region Program Hakkında
        private void programHakkındaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Form2 frm2 = new Form2();
            frm2.Show();
        }
        #endregion

        #region Programı Kapat
        private void programıKapatToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }
        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            Application.Exit();
        }
        #endregion

        #region Sonuçları Kaydet
        private void sonuçlarıKaydetToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (textBox_HedefSite.Text == "")
            {
                MessageBox.Show("Hedef taraması yapmadan kayıt yapamazsınız!", "Hata; ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                //Programın bulunduğu konum
                yol = Application.StartupPath;
                //Kaydet Motoru
                sonuclariKaydet();
            }
        }
        #endregion

        #region Sonuçları Farklı Kaydet
        private void sonuçlarıFarklıKaydetToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (textBox_HedefSite.Text == "")
            {
                MessageBox.Show("Hedef taraması yapmadan kayıt yapamazsınız!", "Hata; ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                //Klasor Seç
                folderBrowserDialog1.ShowNewFolderButton = true;
                // Kontrolü göster
                DialogResult result = folderBrowserDialog1.ShowDialog();
                if (result == DialogResult.OK)
                {
                    yol = folderBrowserDialog1.SelectedPath;
                    //Kaydet Motoru
                    sonuclariKaydet();
                }
                else
                {
                    MessageBox.Show("Kaydedilecek klasörü seçmediniz.","Bilgi;",MessageBoxButtons.OK,MessageBoxIcon.Information);
                }
                
            }
        }
        #endregion

        #region Sonuçları Kaydet Motoru
        private void sonuclariKaydet()
        {
            try
            {
                //Klasörün adını hedef site adı yapıyoruz.
                klasorAdi = textBox_HedefSite.Text;

                //Sonuçların kaydedileceği dizin varmı?
                if (!Directory.Exists(yol + @"\Çıktılar"))
                {
                    //YOKSA

                    //Çıktılar diye dizin oluştur
                    Directory.CreateDirectory(yol + @"\Çıktılar");

                    //Sonuçların kaydedileceği dizin
                    hedefYol = yol + @"\Çıktılar\" + klasorAdi;
                    //Böyle bir dizin varmı?
                    if (!Directory.Exists(hedefYol))
                    {
                        //YOKSA
                        //Sitenin sonuçlarını kaydedileceği dizini oluştur
                        Directory.CreateDirectory(hedefYol);
                        dosyaOlusturmaKaydetme();
                    }
                    else
                    {
                        //VARSA
                        dosyaOlusturmaKaydetme();
                    }
                }
                else
                {
                    //VARSA

                    //Sonuçların kaydedileceği dizin
                    hedefYol = yol + @"\Çıktılar\" + klasorAdi;
                    //Böyle bir dizin varmı?
                    if (!Directory.Exists(hedefYol))
                    {
                        //YOKSA
                        //Sitenin sonuçlarını kaydedileceği dizini oluştur
                        Directory.CreateDirectory(hedefYol);
                        dosyaOlusturmaKaydetme();
                    }
                    else
                    {
                        //VARSA
                        //Klasörü ve içindekilerin hepsini sil
                        Directory.Delete(hedefYol, true);
                        //Sitenin sonuçlarını kaydedileceği dizini oluştur
                        Directory.CreateDirectory(hedefYol);
                        dosyaOlusturmaKaydetme();
                    }
                }
            }
            catch { }
        }

        private void dosyaOlusturmaKaydetme()
        {
            try
            {
                #region Bilgiler Dosyası
                try
                {
                    //Dosyayı açmaya çalış yoksa catch kısmına geç
                    StreamReader Dosya = File.OpenText(hedefYol + @"\Bilgiler.txt");
                    Dosya.Close();
                    try
                    {
                        //Dosyayı appendText ile yazmak için açtık
                        StreamWriter dosyaAc = File.AppendText(hedefYol + @"\Bilgiler.txt");
                        // Dosya.WriteLine ile dosyaya verileri ekledik.
                        dosyaAc.WriteLine("Hedef = " + textBox_HedefSite.Text);
                        dosyaAc.WriteLine("Tarih = " + DateTime.Now);
                        // Dosya yı kapattık.
                        dosyaAc.Close(); 
                    } catch  { }

                }
                catch
                {
                    //Yeni bir dosya oluştur
                    StreamWriter Dosya = File.CreateText(hedefYol + @"\Bilgiler.txt");
                    Dosya.Close();
                    try
                    {
                        //Dosyayı appendText ile yazmak için açtık
                        StreamWriter dosyaAc = File.AppendText(hedefYol + @"\Bilgiler.txt");
                        // Dosya.WriteLine ile dosyaya verileri ekledik.
                        dosyaAc.WriteLine("Hedef = " + textBox_HedefSite.Text);
                        dosyaAc.WriteLine("Tarih = " + DateTime.Now);
                        // Dosya yı kapattık.
                        dosyaAc.Close(); 
                    }
                    catch { }
                }
                #endregion

                #region Whois Dosyası
                try
                {
                    //Dosyayı açmaya çalış yoksa catch kısmına geç
                    StreamReader Dosya = File.OpenText(hedefYol + @"\Whois.txt");
                    Dosya.Close();
                    try
                    {
                        //Dosyayı appendText ile yazmak için açtık
                        StreamWriter dosyaAc = File.AppendText(hedefYol + @"\Whois.txt");
                        // Dosya.WriteLine ile dosyaya verileri ekledik.
                        dosyaAc.WriteLine("## Registrar Bilgileri ##\n");
                        dosyaAc.WriteLine("\nBarındığı Firma = " + textBox_Whois_Registrar_Firma.Text);
                        dosyaAc.WriteLine("\nID = " + textBox_Whois_Registrar_ID.Text);
                        dosyaAc.WriteLine("\nTelefon = " + textBox_Whois_Registrar_Telefon.Text);
                        dosyaAc.WriteLine("\nEmail Resim = " + pictureBox3.ImageLocation);
                        dosyaAc.WriteLine("\nEmail Servis = " + textBox_Whois_Registrar_Email.Text + "\n");

                        dosyaAc.WriteLine("\n## Domain Sahibi Bilgileri ##");
                        dosyaAc.WriteLine("\nAdı Soyadı = " + textBox_Whois_AdminAdSoyad.Text);
                        dosyaAc.WriteLine("\nŞirketi = " + textBox_Whois_AdminSirketi.Text);
                        dosyaAc.WriteLine("\nTelefon = " + textBox_Whois_AdminTelefon.Text);
                        dosyaAc.WriteLine("\nEmail Resim = " + pictureBox2.ImageLocation);
                        dosyaAc.WriteLine("\nEmail Servis = " + textBox_Whois_AdminEmail.Text);
                        dosyaAc.WriteLine("\nÜlke = " + textBox_Whois_AdminUlke.Text);
                        dosyaAc.WriteLine("\nŞehir = " + textBox_Whois_AdminSehir.Text);
                        dosyaAc.WriteLine("\nAdres = " + textBox_Whois_AdminAdres.Text + "\n");

                        dosyaAc.WriteLine("\n## Domain Tarihleri ##");
                        dosyaAc.WriteLine("\nOluşturulma Tarihi = " + textBox_Whois_Olusturma.Text);
                        dosyaAc.WriteLine("\nBitiş Tarihi = " + textBox_Whois_Bitis.Text);
                        dosyaAc.WriteLine("\nSon Güncelleme Tarihi = " + textBox_Whois_Guncelleme.Text + "\n");

                        dosyaAc.WriteLine("\n## Site Bilgileri ##");
                        dosyaAc.WriteLine("\nDomain Durumu = " + textBox_Whois_DomainDurumu.Text);
                        dosyaAc.WriteLine("\nSite Durumu = " + textBox_Whois_SiteDurum.Text);
                        dosyaAc.WriteLine("\nServer Tipi = " + textBox_Whois_ServerTipi.Text);
                        dosyaAc.WriteLine("\nIP Adresi = " + textBox_Whois_IPAdres.Text + "\n");

                        dosyaAc.WriteLine("\n## Name Server(DNS) Bilgileri ##");
                        foreach (var item in listBox_Whois_NS.Items)
                        {
                            dosyaAc.WriteLine("\nNS = " + item);
                        }
                        foreach (var item2 in listBox_Whois_IP.Items)
                        {
                            dosyaAc.WriteLine("\nIP = " + item2);
                        }
                        // Dosya yı kapattık.
                        dosyaAc.Close();
                    }
                    catch { }

                }
                catch
                {
                    //Yeni bir dosya oluştur
                    StreamWriter Dosya = File.CreateText(hedefYol + @"\Whois.txt");
                    Dosya.Close();
                    try
                    {
                        //Dosyayı appendText ile yazmak için açtık
                        StreamWriter dosyaAc = File.AppendText(hedefYol + @"\Whois.txt");
                        // Dosya.WriteLine ile dosyaya verileri ekledik.
                        dosyaAc.WriteLine("## Registrar Bilgileri ##\n");
                        dosyaAc.WriteLine("\nBarındığı Firma = " + textBox_Whois_Registrar_Firma.Text);
                        dosyaAc.WriteLine("\nID = " + textBox_Whois_Registrar_ID.Text);
                        dosyaAc.WriteLine("\nTelefon = " + textBox_Whois_Registrar_Telefon.Text);
                        dosyaAc.WriteLine("\nEmail Resim = " + pictureBox3.ImageLocation);
                        dosyaAc.WriteLine("\nEmail Servis = " + textBox_Whois_Registrar_Email.Text + "\n");

                        dosyaAc.WriteLine("\n## Domain Sahibi Bilgileri ##");
                        dosyaAc.WriteLine("\nAdı Soyadı = " + textBox_Whois_AdminAdSoyad.Text);
                        dosyaAc.WriteLine("\nŞirketi = " + textBox_Whois_AdminSirketi.Text);
                        dosyaAc.WriteLine("\nTelefon = " + textBox_Whois_AdminTelefon.Text);
                        dosyaAc.WriteLine("\nEmail Resim = " + pictureBox2.ImageLocation);
                        dosyaAc.WriteLine("\nEmail Servis = " + textBox_Whois_AdminEmail.Text);
                        dosyaAc.WriteLine("\nÜlke = " + textBox_Whois_AdminUlke.Text);
                        dosyaAc.WriteLine("\nŞehir = " + textBox_Whois_AdminSehir.Text);
                        dosyaAc.WriteLine("\nAdres = " + textBox_Whois_AdminAdres.Text + "\n");

                        dosyaAc.WriteLine("\n## Domain Tarihleri ##");
                        dosyaAc.WriteLine("\nOluşturulma Tarihi = " + textBox_Whois_Olusturma.Text);
                        dosyaAc.WriteLine("\nBitiş Tarihi = " + textBox_Whois_Bitis.Text);
                        dosyaAc.WriteLine("\nSon Güncelleme Tarihi = " + textBox_Whois_Guncelleme.Text + "\n");

                        dosyaAc.WriteLine("\n## Site Bilgileri ##");
                        dosyaAc.WriteLine("\nDomain Durumu = " + textBox_Whois_DomainDurumu.Text);
                        dosyaAc.WriteLine("\nSite Durumu = " + textBox_Whois_SiteDurum.Text);
                        dosyaAc.WriteLine("\nServer Tipi = " + textBox_Whois_ServerTipi.Text);
                        dosyaAc.WriteLine("\nIP Adresi = " + textBox_Whois_IPAdres.Text + "\n");

                        dosyaAc.WriteLine("\n## Name Server(DNS) Bilgileri ##");
                        foreach (var item in listBox_Whois_NS.Items)
                        { 
                            dosyaAc.WriteLine("\nNS = " + item);
                        }
                        foreach (var item2 in listBox_Whois_IP.Items)
                        {
                            dosyaAc.WriteLine("\nIP = " + item2);
                        }
                        // Dosya yı kapattık.
                        dosyaAc.Close();
                    }
                    catch { }
                }
                #endregion

                #region ReverseIP Dosyası
                try
                {
                    //Dosyayı açmaya çalış yoksa catch kısmına geç
                    StreamReader Dosya = File.OpenText(hedefYol + @"\ReverseIP.txt");
                    Dosya.Close();
                    try
                    {
                        //Dosyayı appendText ile yazmak için açtık
                        StreamWriter dosyaAc = File.AppendText(hedefYol + @"\ReverseIP.txt");
                        // Dosya.WriteLine ile dosyaya verileri ekledik.
                        dosyaAc.WriteLine("## ReverseIP Adresleri ##\n");
                        dosyaAc.WriteLine("\nToplam Site = " + textBox_ReverseIP_ToplamSite.Text + "\n");

                        foreach (var item in listBox_ReverseIPList.Items)
                        {
                            dosyaAc.WriteLine(item + "\n");
                        }
                        // Dosya yı kapattık.
                        dosyaAc.Close();
                    }
                    catch { }

                }
                catch
                {
                    //Yeni bir dosya oluştur
                    StreamWriter Dosya = File.CreateText(hedefYol + @"\ReverseIP.txt");
                    Dosya.Close();
                    try
                    {
                        //Dosyayı appendText ile yazmak için açtık
                        StreamWriter dosyaAc = File.AppendText(hedefYol + @"\ReverseIP.txt");
                        // Dosya.WriteLine ile dosyaya verileri ekledik.
                        dosyaAc.WriteLine("## ReverseIP Adresleri ##\n");
                        dosyaAc.WriteLine("\nToplam Site = " + textBox_ReverseIP_ToplamSite.Text + "\n");

                        foreach (var item in listBox_ReverseIPList.Items)
                        {
                            dosyaAc.WriteLine(item + "\n");
                        }
                        // Dosya yı kapattık.
                        dosyaAc.Close();
                    }
                    catch { }
                }
                #endregion

                #region Spider Dosyası
                try
                {
                    //Dosyayı açmaya çalış yoksa catch kısmına geç
                    StreamReader Dosya = File.OpenText(hedefYol + @"\Spider.txt");
                    Dosya.Close();
                    try
                    {
                        //Dosyayı appendText ile yazmak için açtık
                        StreamWriter dosyaAc = File.AppendText(hedefYol + @"\Spider.txt");
                        // Dosya.WriteLine ile dosyaya verileri ekledik.
                        dosyaAc.WriteLine("## Bulunan Linkler ##\n");
                        dosyaAc.WriteLine("\nToplam URL = " + textBox_Spider_ToplamURL.Text + "\n");

                        foreach (var item in listBox_SpiderList.Items)
                        {
                            dosyaAc.WriteLine(item + "\n");
                        }
                        // Dosya yı kapattık.
                        dosyaAc.Close();
                    }
                    catch { }

                }
                catch
                {
                    //Yeni bir dosya oluştur
                    StreamWriter Dosya = File.CreateText(hedefYol + @"\Spider.txt");
                    Dosya.Close();
                    try
                    {
                        //Dosyayı appendText ile yazmak için açtık
                        StreamWriter dosyaAc = File.AppendText(hedefYol + @"\Spider.txt");
                        // Dosya.WriteLine ile dosyaya verileri ekledik.
                        dosyaAc.WriteLine("## Bulunan Linkler ##\n");
                        dosyaAc.WriteLine("\nToplam URL = " + textBox_Spider_ToplamURL.Text + "\n");

                        foreach (var item in listBox_SpiderList.Items)
                        {
                            dosyaAc.WriteLine(item + "\n");
                        }
                        // Dosya yı kapattık.
                        dosyaAc.Close();
                    }
                    catch { }
                }
                #endregion

                #region FileSpider Dosyası
                try
                {
                    //Dosyayı açmaya çalış yoksa catch kısmına geç
                    StreamReader Dosya = File.OpenText(hedefYol + @"\FileSpider.txt");
                    Dosya.Close();
                    try
                    {
                        //Dosyayı appendText ile yazmak için açtık
                        StreamWriter dosyaAc = File.AppendText(hedefYol + @"\FileSpider.txt");
                        // Dosya.WriteLine ile dosyaya verileri ekledik.
                        dosyaAc.WriteLine("## Bulunan Linkler ##\n");
                        dosyaAc.WriteLine("\nToplam URL = " + textBox_FileSpider.Text + "\n");

                        foreach (var item in listBox_FileSpider_Sonuclar.Items)
                        {
                            dosyaAc.WriteLine(item + "\n");
                        }
                        // Dosya yı kapattık.
                        dosyaAc.Close();
                    }
                    catch { }

                }
                catch
                {
                    //Yeni bir dosya oluştur
                    StreamWriter Dosya = File.CreateText(hedefYol + @"\FileSpider.txt");
                    Dosya.Close();
                    try
                    {
                        //Dosyayı appendText ile yazmak için açtık
                        StreamWriter dosyaAc = File.AppendText(hedefYol + @"\FileSpider.txt");
                        // Dosya.WriteLine ile dosyaya verileri ekledik.
                        dosyaAc.WriteLine("## Bulunan Linkler ##\n");
                        dosyaAc.WriteLine("\nToplam URL = " + textBox_FileSpider.Text + "\n");

                        foreach (var item in listBox_FileSpider_Sonuclar.Items)
                        {
                            dosyaAc.WriteLine(item + "\n");
                        }
                        // Dosya yı kapattık.
                        dosyaAc.Close();
                    }
                    catch { }
                }
                #endregion

                MessageBox.Show("Sonuçlar başarılı bir şekilde kaydedildi. Kayıtlara '" + yol + "' klasöründen erişebilirsiniz.", "Bilgi; ", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch
            {
                MessageBox.Show("Bir hata oluştu. Lütfen tekrar kaydetmeyi deneyin.", "Hata;",MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        #endregion

        
    }
}
